import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import './Group.css';
import { jwtDecode } from 'jwt-decode';

function Group({ currUser, authenticated }) {
    // Definición de las URLs de la API
    const GROUPS_API_URL = "http://localhost:3009/group";
    const USERS_API_URL = "http://localhost:3009/api/v1/users";

    // Hook de navegación de React Router
    const navigate = useNavigate();

    // Efecto para redirigir si el usuario no está autenticado
    useEffect(() => {
        if (!authenticated) {
            console.log("Estás autenticado. Redirigiendo...");
            navigate("/group");
        }
    }, [authenticated, navigate]);

    // Estados para almacenar grupos y usuarios, y gestionar la carga
    const [groups, setGroups] = useState([]);
    const [isLoadingGroups, setIsLoadingGroups] = useState(true);
    const [users, setUsers] = useState([]);
    const [isLoadingUsers, setIsLoadingUsers] = useState(true);
    const [selectedUserId, setSelectedUserId] = useState('');

    // Función para obtener datos de grupos y usuarios desde la API
    const fetchData = async () => {
        try {
            const token = localStorage.getItem('token');

            // Obtener grupos
            const groupsResponse = await fetch(GROUPS_API_URL, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });
            const groupsData = await groupsResponse.json();
            setGroups(groupsData);
            setIsLoadingGroups(false);

            // Obtener usuarios
            const usersResponse = await fetch(USERS_API_URL, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': token
                }
            });

            if (usersResponse.ok) {
                const usersData = await usersResponse.json();
                setIsLoadingGroups(false);

                if (Array.isArray(usersData)) {
                    setUsers(usersData);
                    setIsLoadingUsers(false);
                } else {
                    console.error('La respuesta del servidor no es un array de usuarios.');
                    setIsLoadingUsers(false);
                }
            } else {
                console.error('Error al obtener usuarios:', usersResponse.status);
                setIsLoadingUsers(false);
            }
        } catch (error) {
            console.log('Error al obtener datos:', error);
            setIsLoadingGroups(false);
            setIsLoadingUsers(false);
        }
    };

    // Efecto para cargar datos al montar el componente
    useEffect(() => {
        fetchData();
    }, []);

    // Función para agregar un usuario a un grupo
    const addUserToGroup = async (groupId) => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`http://localhost:3009/group/${groupId}/add_user/${selectedUserId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': token
                },
            });

            if (response.ok) {
                console.log('Usuario agregado al grupo');
                fetchData(); // Actualizar la lista de grupos
            } else {
                console.log("No se pudo agregar el usuario al grupo");
                alert('No se pudo agregar el usuario al grupo');
            }
        } catch (error) {
            console.log('Error al agregar usuario al grupo:', error);
        }
    };

    // Manejador de selección de usuario
    const handleUserSelect = (userId) => {
        setSelectedUserId(userId);
    };

    // Manejador para agregar un usuario a un grupo
    const handleAddUser = (groupId) => {
        addUserToGroup(groupId);
    };

    return (
        <div>
            <h1>Grupos</h1>

            {/* Mostrar mensaje de carga si se están cargando grupos o usuarios */}
            {isLoadingGroups || isLoadingUsers ? (
                <div id="container">
                    <label className="loading-title">Cargando</label>
                    <span className="loading-circle sp1">
                        <span className="loading-circle sp2">
                            <span className="loading-circle sp3"></span>
                        </span>
                    </span>
                </div>
            ) : (
                <div>
                    {/* Contenido una vez que se han cargado grupos y usuarios */}
                    <div>¡Hola! Este es el contenido del componente Group.</div>

                    {/* Mostrar lista de grupos */}
                    <div>
                        {groups.length > 0 ? (
                            <ul>
                                {groups.map((group) => (
                                    <li key={group.id}>
                                        {group.name}
                                        <button onClick={() => handleAddUser(group.id)}>+</button>
                                    </li>
                                ))}
                                <Link to='/newGroup' className='addgroup'>Agregar grupo</Link>
                            </ul>
                        ) : (
                            <p>No hay grupos disponibles.</p>
                        )}
                    </div>

                    {/* Seleccionar un usuario para agregarlo al grupo */}
                    <h2>Selecciona un usuario para agregarlo al grupo:</h2>
                    <ul>
                        {users.map((user) => (
                            <li key={user.id} onClick={() => handleUserSelect(user.id)}>
                                {user.first_name} ----- {user.email}
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
}

export default Group;

