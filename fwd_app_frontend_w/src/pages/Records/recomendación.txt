import React, { useState, useEffect, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext, AuthProvider } from "../PrivateText/AuthContext";
import "./Records.css";

const RecordsComponent = () => {
  // Obtener el estado de autenticación del contexto
  const { authenticated } = useContext(AuthContext);

  // Estados locales para manejar registros, carga, errores, registros filtrados y datos de usuario
  const [records, setRecords] = useState([]);
  const [isLoadingRecords, setIsLoadingRecords] = useState(true);
  const [userRole, setUserRole] = useState('');
  const [userDataFromLocalStorage, setUserDataFromLocalStorage] = useState({});

  // Función de navegación proporcionada por react-router-dom
  const navigate = useNavigate();

  // Efecto para obtener y almacenar datos de usuario desde el almacenamiento local

  
  useEffect(() => {
    const storedUserData = JSON.parse(localStorage.getItem("userData")) || {};
    setUserDataFromLocalStorage(storedUserData);
  }, []);
  // Efecto para redirigir a la página de registros si no está autenticado

  useEffect(() => {
    if (!authenticated) {
      navigate("/records");
    }
  }, [authenticated, navigate]);



  // Efecto para obtener registros médicos desde la API
  useEffect(() => {
    const token = localStorage.getItem("token");

    if (!token) {
      return;
    }

    fetch("http://localhost:3009/medical_record", {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error(`Error ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then((data) => {
        setRecords(data);
        setIsLoadingRecords(false);
      })
      .catch((error) => {
        // setError('THis fialed...')
      });
  }, [authenticated]);

  // Efecto para obtener el rol del usuario desde la API y filtrar registros en consecuencia
  useEffect(async () => {
    const token = localStorage.getItem("token");
  
    if (!token) {
      setIsLoadingRecords(false);
      return;
    }

    try {
      const response = await fetch("http://localhost:3009/user_role", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      const userDataRole = await response.json();
      const userRole = userDataRole.role;

      console.log("Datos del rol del usuario", userDataRole);
      console.log("Rol del usuario", userRole);

      setUserRole(userRole)
    } catch (error) {
      setUserRole('error')
    }
  }, []);
  
  
  const filterRecords = () => {
    if (!records && userRole === '')
      return 

    let userRecords = [];
    if (userRole === 'student') {
      // Filtrar registros para estudiantes
      userRecords = records.filter((record) => record.user_id === userDataFromLocalStorage.id);
    } else {
      userRecords = records;
    }

    return userRole === 'error' ? [] : userRecords;
  };
  

  return (
    <div>
      <AuthProvider>
        {isLoadingRecords ? (
          // Muestra un mensaje de carga si los registros están siendo cargados
          <div id="container">
            <label className="loading-title">Cargando</label>
            <span className="loading-circle sp1">
              <span className="loading-circle sp2">
                <span className="loading-circle sp3"></span>
              </span>
            </span>
          </div>
        ) : (
          // Muestra la lista de registros filtrados
          <ul>
            {filterRecords().map((record) => (
              <li key={record.id}>
                <p>Estudiante: {record.user_id}</p>
                <p>Padecimiento: {record.suffering}</p>
                <p>Especificaciones: {record.specifications}</p>
                <hr />
              </li>
            ))}
          </ul>
        )}
      </AuthProvider>
    </div>
  );
};

export default RecordsComponent;
